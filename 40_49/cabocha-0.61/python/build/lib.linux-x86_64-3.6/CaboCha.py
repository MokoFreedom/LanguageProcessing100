# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CaboCha', [dirname(__file__)])
        except ImportError:
            import _CaboCha
            return _CaboCha
        if fp is not None:
            try:
                _mod = imp.load_module('_CaboCha', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CaboCha = swig_import_helper()
    del swig_import_helper
else:
    import _CaboCha
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_CaboCha.EUC_JP_swigconstant(_CaboCha)
EUC_JP = _CaboCha.EUC_JP

_CaboCha.CP932_swigconstant(_CaboCha)
CP932 = _CaboCha.CP932

_CaboCha.UTF8_swigconstant(_CaboCha)
UTF8 = _CaboCha.UTF8

_CaboCha.ASCII_swigconstant(_CaboCha)
ASCII = _CaboCha.ASCII

_CaboCha.IPA_swigconstant(_CaboCha)
IPA = _CaboCha.IPA

_CaboCha.JUMAN_swigconstant(_CaboCha)
JUMAN = _CaboCha.JUMAN

_CaboCha.UNIDIC_swigconstant(_CaboCha)
UNIDIC = _CaboCha.UNIDIC

_CaboCha.FORMAT_TREE_swigconstant(_CaboCha)
FORMAT_TREE = _CaboCha.FORMAT_TREE

_CaboCha.FORMAT_LATTICE_swigconstant(_CaboCha)
FORMAT_LATTICE = _CaboCha.FORMAT_LATTICE

_CaboCha.FORMAT_TREE_LATTICE_swigconstant(_CaboCha)
FORMAT_TREE_LATTICE = _CaboCha.FORMAT_TREE_LATTICE

_CaboCha.FORMAT_XML_swigconstant(_CaboCha)
FORMAT_XML = _CaboCha.FORMAT_XML

_CaboCha.FORMAT_NONE_swigconstant(_CaboCha)
FORMAT_NONE = _CaboCha.FORMAT_NONE

_CaboCha.INPUT_RAW_SENTENCE_swigconstant(_CaboCha)
INPUT_RAW_SENTENCE = _CaboCha.INPUT_RAW_SENTENCE

_CaboCha.INPUT_POS_swigconstant(_CaboCha)
INPUT_POS = _CaboCha.INPUT_POS

_CaboCha.INPUT_CHUNK_swigconstant(_CaboCha)
INPUT_CHUNK = _CaboCha.INPUT_CHUNK

_CaboCha.INPUT_SELECTION_swigconstant(_CaboCha)
INPUT_SELECTION = _CaboCha.INPUT_SELECTION

_CaboCha.INPUT_DEP_swigconstant(_CaboCha)
INPUT_DEP = _CaboCha.INPUT_DEP

_CaboCha.OUTPUT_RAW_SENTENCE_swigconstant(_CaboCha)
OUTPUT_RAW_SENTENCE = _CaboCha.OUTPUT_RAW_SENTENCE

_CaboCha.OUTPUT_POS_swigconstant(_CaboCha)
OUTPUT_POS = _CaboCha.OUTPUT_POS

_CaboCha.OUTPUT_CHUNK_swigconstant(_CaboCha)
OUTPUT_CHUNK = _CaboCha.OUTPUT_CHUNK

_CaboCha.OUTPUT_SELECTION_swigconstant(_CaboCha)
OUTPUT_SELECTION = _CaboCha.OUTPUT_SELECTION

_CaboCha.OUTPUT_DEP_swigconstant(_CaboCha)
OUTPUT_DEP = _CaboCha.OUTPUT_DEP

_CaboCha.TRAIN_NE_swigconstant(_CaboCha)
TRAIN_NE = _CaboCha.TRAIN_NE

_CaboCha.TRAIN_CHUNK_swigconstant(_CaboCha)
TRAIN_CHUNK = _CaboCha.TRAIN_CHUNK

_CaboCha.TRAIN_DEP_swigconstant(_CaboCha)
TRAIN_DEP = _CaboCha.TRAIN_DEP
class Chunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chunk, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["link"] = _CaboCha.Chunk_link_get
    if _newclass:
        link = _swig_property(_CaboCha.Chunk_link_get)
    __swig_getmethods__["head_pos"] = _CaboCha.Chunk_head_pos_get
    if _newclass:
        head_pos = _swig_property(_CaboCha.Chunk_head_pos_get)
    __swig_getmethods__["func_pos"] = _CaboCha.Chunk_func_pos_get
    if _newclass:
        func_pos = _swig_property(_CaboCha.Chunk_func_pos_get)
    __swig_getmethods__["token_size"] = _CaboCha.Chunk_token_size_get
    if _newclass:
        token_size = _swig_property(_CaboCha.Chunk_token_size_get)
    __swig_getmethods__["token_pos"] = _CaboCha.Chunk_token_pos_get
    if _newclass:
        token_pos = _swig_property(_CaboCha.Chunk_token_pos_get)
    __swig_getmethods__["score"] = _CaboCha.Chunk_score_get
    if _newclass:
        score = _swig_property(_CaboCha.Chunk_score_get)
    __swig_getmethods__["feature_list_size"] = _CaboCha.Chunk_feature_list_size_get
    if _newclass:
        feature_list_size = _swig_property(_CaboCha.Chunk_feature_list_size_get)

    def feature_list(self, i):
        return _CaboCha.Chunk_feature_list(self, i)
Chunk_swigregister = _CaboCha.Chunk_swigregister
Chunk_swigregister(Chunk)

class Token(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Token, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Token, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["surface"] = _CaboCha.Token_surface_get
    if _newclass:
        surface = _swig_property(_CaboCha.Token_surface_get)
    __swig_getmethods__["normalized_surface"] = _CaboCha.Token_normalized_surface_get
    if _newclass:
        normalized_surface = _swig_property(_CaboCha.Token_normalized_surface_get)
    __swig_getmethods__["feature"] = _CaboCha.Token_feature_get
    if _newclass:
        feature = _swig_property(_CaboCha.Token_feature_get)
    __swig_getmethods__["feature_list_size"] = _CaboCha.Token_feature_list_size_get
    if _newclass:
        feature_list_size = _swig_property(_CaboCha.Token_feature_list_size_get)
    __swig_getmethods__["ne"] = _CaboCha.Token_ne_get
    if _newclass:
        ne = _swig_property(_CaboCha.Token_ne_get)
    __swig_getmethods__["chunk"] = _CaboCha.Token_chunk_get
    if _newclass:
        chunk = _swig_property(_CaboCha.Token_chunk_get)

    def feature_list(self, i):
        return _CaboCha.Token_feature_list(self, i)
Token_swigregister = _CaboCha.Token_swigregister
Token_swigregister(Token)

class Tree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tree, name)
    __repr__ = _swig_repr

    def set_sentence(self, sentence):
        return _CaboCha.Tree_set_sentence(self, sentence)

    def sentence(self):
        return _CaboCha.Tree_sentence(self)

    def sentence_size(self):
        return _CaboCha.Tree_sentence_size(self)

    def chunk(self, i):
        return _CaboCha.Tree_chunk(self, i)

    def token(self, i):
        return _CaboCha.Tree_token(self, i)

    def read(self, input, input_layer):
        return _CaboCha.Tree_read(self, input, input_layer)

    def empty(self):
        return _CaboCha.Tree_empty(self)

    def clear(self):
        return _CaboCha.Tree_clear(self)

    def clear_chunk(self):
        return _CaboCha.Tree_clear_chunk(self)

    def chunk_size(self):
        return _CaboCha.Tree_chunk_size(self)

    def token_size(self):
        return _CaboCha.Tree_token_size(self)

    def size(self):
        return _CaboCha.Tree_size(self)

    def toString(self, output_format):
        return _CaboCha.Tree_toString(self, output_format)

    def charset(self):
        return _CaboCha.Tree_charset(self)

    def set_charset(self, charset):
        return _CaboCha.Tree_set_charset(self, charset)

    def posset(self):
        return _CaboCha.Tree_posset(self)

    def set_posset(self, posset):
        return _CaboCha.Tree_set_posset(self, posset)

    def output_layer(self):
        return _CaboCha.Tree_output_layer(self)

    def set_output_layer(self, output_layer):
        return _CaboCha.Tree_set_output_layer(self, output_layer)

    def what(self):
        return _CaboCha.Tree_what(self)

    def __init__(self):
        this = _CaboCha.new_Tree()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CaboCha.delete_Tree
    __del__ = lambda self: None
Tree_swigregister = _CaboCha.Tree_swigregister
Tree_swigregister(Tree)

class Parser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parser, name)
    __repr__ = _swig_repr

    def parseToString(self, input):
        return _CaboCha.Parser_parseToString(self, input)

    def parse(self, *args):
        return _CaboCha.Parser_parse(self, *args)

    def what(self):
        return _CaboCha.Parser_what(self)
    __swig_getmethods__["version"] = lambda x: _CaboCha.Parser_version
    if _newclass:
        version = staticmethod(_CaboCha.Parser_version)
    __swig_destroy__ = _CaboCha.delete_Parser
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CaboCha.new_Parser(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
Parser_swigregister = _CaboCha.Parser_swigregister
Parser_swigregister(Parser)

def Parser_version():
    return _CaboCha.Parser_version()
Parser_version = _CaboCha.Parser_version


def getLastError():
    return _CaboCha.getLastError()
getLastError = _CaboCha.getLastError

_CaboCha.VERSION_swigconstant(_CaboCha)
VERSION = _CaboCha.VERSION
# This file is compatible with both classic and new-style classes.


